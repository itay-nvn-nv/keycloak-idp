apiVersion: batch/v1
kind: Job
metadata:
  name: keycloak-post-install
spec:
  backoffLimit: 0
  activeDeadlineSeconds: 600
  template:
    spec:
      restartPolicy: Never
      initContainers:
      - name: url-health-check
        image: wbitt/network-multitool
        env:
        - name: KEYCLOAK_URL
          valueFrom:
            configMapKeyRef:
              name: keycloak-env-vars
              key: KEYCLOAK_HOSTNAME
        envFrom:
          - secretRef:
              name: runai-ctrl-plane-data
        command:
          - sh
          - -c
          - |
            set -o errexit
            CHECK_INTERVAL_SECONDS="${CHECK_INTERVAL_SECONDS:-30}"
            echo "Starting URL health check with timeout of ${activeDeadlineSeconds} seconds..."
            while true; do
              echo "Checking Keycloak URL: $KEYCLOAK_URL"
              if curl -s -o /dev/null -w "%{http_code}" "$KEYCLOAK_URL" | grep -E "^(2|3)[0-9]{2}$" > /dev/null; then
                echo "Keycloak URL is healthy."
              else
                echo "Keycloak URL is NOT healthy. Waiting for ${CHECK_INTERVAL_SECONDS} second(s) before retrying..."
                sleep "$CHECK_INTERVAL_SECONDS"
                continue
              fi

              echo "Checking App URL: $RUNAI_CTRL_PLANE_URL"
              if curl -s -o /dev/null -w "%{http_code}" "$RUNAI_CTRL_PLANE_URL" | grep -E "^(2|3)[0-9]{2}$" > /dev/null; then
                echo "App URL is healthy."
              else
                echo "App URL is NOT healthy. Waiting for ${CHECK_INTERVAL_SECONDS} second(s) before retrying..."
                sleep "$CHECK_INTERVAL_SECONDS"
                continue
              fi

              echo "All URLs are healthy. Exiting..."
              exit 0
            done
      - name: keycloak-create-token
        image: wbitt/network-multitool
        env:
          - name: KEYCLOAK_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                name: keycloak
                key: admin-password
          - name: KEYCLOAK_ADMIN_USERNAME
            valueFrom:
              configMapKeyRef:
                name: keycloak-env-vars
                key: KEYCLOAK_ADMIN
          - name: KEYCLOAK_URL
            valueFrom:
              configMapKeyRef:
                name: keycloak-env-vars
                key: KEYCLOAK_HOSTNAME
        command:
          - sh
          - -c
          - |
            # if [[ "$KEYCLOAK_URL" == */ ]]; then
            #   KEYCLOAK_URL="${KEYCLOAK_URL%/}"
            # fi
            KEYCLOAK_TOKEN=$(curl -s -X POST "$KEYCLOAK_URL/realms/master/protocol/openid-connect/token" \
              -H "Content-Type: application/x-www-form-urlencoded" \
              -d "username=$KEYCLOAK_ADMIN_USERNAME" \
              -d "password=$KEYCLOAK_ADMIN_PASSWORD" \
              -d 'grant_type=password' \
              -d 'client_id=admin-cli' | jq -r '.access_token')
            echo "export KEYCLOAK_TOKEN=$KEYCLOAK_TOKEN" >> /shared-files/env-vars.sh
            echo "export KEYCLOAK_URL=$KEYCLOAK_URL" >> /shared-files/env-vars.sh
            cat /shared-files/env-vars.sh
        volumeMounts:
          - name: shared-volume
            mountPath: /shared-files
      - name: keycloak-import-realm
        image: wbitt/network-multitool
        envFrom:
          - secretRef:
              name: runai-ctrl-plane-data
        command:
          - sh
          - -c
          - |
            source /shared-files/env-vars.sh

            CLEAN_URL="${RUNAI_CTRL_PLANE_URL#*://}"
            SAML_CLIENT_ID="runai-$CLEAN_URL/runai"

            jq --arg SAML_CLIENT_ID "$SAML_CLIENT_ID" --arg RUNAI_CTRL_PLANE_URL "$RUNAI_CTRL_PLANE_URL" '
              (.. | select(type == "string")) |= gsub("RUNAI_CTRL_PLANE_URL_PLACEHOLDER"; $RUNAI_CTRL_PLANE_URL) |
              (.. | select(type == "string")) |= gsub("SAML_CLIENT_ID_PLACEHOLDER"; $SAML_CLIENT_ID)
            ' /keycloak-realm-data/realm.json > /shared-files/realm_updated.json

            curl -vv "$KEYCLOAK_URL/admin/realms" \
              -H 'accept: application/json, text/plain, */*' \
              -H 'accept-language: en-US,en;q=0.9' \
              -H "authorization: Bearer $KEYCLOAK_TOKEN" \
              -H 'Content-Type: application/json' \
              --data "@/shared-files/realm_updated.json"
        volumeMounts:
          - name: shared-volume
            mountPath: /shared-files
          - name: keycloak-realm-data
            mountPath: /keycloak-realm-data
      - name: runai-create-token
        image: wbitt/network-multitool
        envFrom:
          - secretRef:
              name: runai-ctrl-plane-data
        command:
          - sh
          - -c
          - |
            source /shared-files/env-vars.sh

            RUNAI_TOKEN=$(curl -s -X POST "$RUNAI_CTRL_PLANE_URL/api/v1/token" \
              --header 'accept: application/json, text/plain, */*' \
              --header 'accept-language: en-US,en;q=0.9' \
              --header 'Content-Type: application/json' \
              --data-raw "{
                \"grantType\": \"password\",
                \"clientID\": \"cli\",
                \"username\": \"$RUNAI_ADMIN_USERNAME\",
                \"password\": \"$RUNAI_ADMIN_PASSWORD\"}" | jq -r .accessToken)

            echo "export RUNAI_TOKEN=$RUNAI_TOKEN" >> /shared-files/env-vars.sh
            cat /shared-files/env-vars.sh
        volumeMounts:
          - name: shared-volume
            mountPath: /shared-files
      - name: runai-create-idp
        image: wbitt/network-multitool
        envFrom:
          - secretRef:
              name: runai-ctrl-plane-data
        command:
          - sh
          - -c
          - |
            source /shared-files/env-vars.sh

            REALM_NAME=$(jq -r '.realm' /shared-files/realm_updated.json)
            ENTITY_ID=$(jq -r '.clients[1].clientId' /shared-files/realm_updated.json)
            XML_METADATA_URL="$KEYCLOAK_URL/realms/$REALM_NAME/protocol/saml/descriptor"

            curl -s -X POST "$RUNAI_CTRL_PLANE_URL/api/v1/idps" \
            --header 'accept: application/json, text/plain, */*' \
            --header 'accept-language: en-US,en;q=0.9' \
            --header 'Content-Type: application/json' \
            --header "authorization: Bearer $RUNAI_TOKEN" \
            --data-raw "{
                \"mappers\": {
                    \"uid\": \"UID\",
                    \"gid\": \"GID\",
                    \"groups\": \"GROUPS\",
                    \"supplementaryGroups\": \"SUPPLEMENTARYGROUPS\",
                    \"email\": \"email\"},
                \"type\": \"saml\",
                \"samlData\": {
                    \"metadataXmlUrl\": \"$XML_METADATA_URL\",
                    \"metadataXmlFile\": \"\",
                    \"fileName\": \"\",
                    \"metadataXmlType\": \"url\"}
            }"

            # get cluster + department ID's
            CLUSTER_DATA=$(curl -s "$RUNAI_CTRL_PLANE_URL/api/v1/org-unit/departments" \
              -H "authorization: Bearer $RUNAI_TOKEN" | jq)
            echo $CLUSTER_DATA

            CLUSTER_UUID=$(echo $CLUSTER_DATA | jq -r '.departments[0].clusterId')
            DEPARTMENT_ID=$(echo $CLUSTER_DATA | jq -r '.departments[0].id')
            echo $CLUSTER_UUID
            echo $DEPARTMENT_ID

            # create project
            PROJECT_DATA=$(curl -s "$RUNAI_CTRL_PLANE_URL/api/v1/org-unit/projects" \
              -H 'accept: application/json, text/plain, */*' \
              -H 'accept-language: en-US,en;q=0.9' \
              -H "authorization: Bearer $RUNAI_TOKEN" \
              --data-raw "{
              \"clusterId\": \"$CLUSTER_UUID\",
              \"parentId\": \"$DEPARTMENT_ID\",
              \"resources\": [
                {
                  \"nodePool\": {
                    \"name\": \"default\",
                    \"id\": \"100000\"
                  },
                  \"gpu\": {
                    \"deserved\": 4,
                    \"limit\": -1
                  }
                }
              ],
              \"name\": \"dev-team\",
              \"description\": \"\",
              \"schedulingRules\": {
                \"trainingJobTimeLimitSeconds\": null,
                \"interactiveJobTimeLimitSeconds\": null
              }
            }" | jq)
            echo $PROJECT_DATA
            PROJECT_ID=$(echo $PROJECT_DATA | jq -r '.id')

            # create access rule
            curl -s "$RUNAI_CTRL_PLANE_URL/api/v1/authorization/access-rules" \
              -H 'accept: application/json, text/plain, */*' \
              -H 'accept-language: en-US,en;q=0.9' \
              -H "authorization: Bearer $RUNAI_TOKEN" \
              --data-raw "{
              \"scopeId\": \"$PROJECT_ID\",
              \"scopeType\": \"project\",
              \"subjectId\": \"developer-group\",
              \"subjectType\": \"group\",
              \"roleId\": 8
            }"

        volumeMounts:
          - name: shared-volume
            mountPath: /shared-files
      containers:
      - name: main-container
        image: wbitt/network-multitool
        command: ["echo", "done"]
      volumes:
       - name: shared-volume
         emptyDir: {}
       - name: keycloak-realm-data
         configMap:
           name: keycloak-realm-data
